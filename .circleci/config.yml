version: 2.1
parameters:
  action:
    type: enum
    enum: [deploy, rollback]
    default: deploy
  
commands:
  assume-role-with-web-identity:
    parameters:
      role-arn:
        description: |
          The Amazon Resource Name (ARN) of the role that the caller is assuming.
          Role ARN must be configured for web identity.
        type: string
      role-session-name:
        description: identifier for the assumed role session
        type: string
        default: "CircleCI-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}"
      session-duration:
        description: the time span of the session, measured in seconds
        type: string
        default: "3600"
      web-identity-token:
        description: circleci OIDC token to authenticate job to aws
        type: string
        default: $CIRCLE_OIDC_TOKEN
      region:
        description: region in which to perform tasks
        type: string
    steps:
      - run:
          command: |
            # use the OpenID Connect token to obtain AWS credentials
            read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \<<< \
            $(aws sts assume-role-with-web-identity \
              --role-arn << parameters.role-arn >> \
              --role-session-name << parameters.role-session-name >> \
              --web-identity-token << parameters.web-identity-token >> \
              --region << parameters.region >> \
              --endpoint-url "https://sts.<< parameters.region >>.amazonaws.com" \
              --duration-seconds << parameters.session-duration >> \
              --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
              --output text)    

            # configure aws to use the credentials gotten from calling the assume-web-identity command
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} 
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}

            # check if the role was assumed
            aws sts get-caller-identity

            # save credentials in ~/.aws/credentials and ~/.aws/config
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set aws_session_token $AWS_SESSION_TOKEN
            aws configure set default.region << parameters.region >>
         
  get-ec2-pub-ip:
    description: get the list of public ips of ec2 instances and write them to the inventory file
    steps:
      - run: mkdir -p workspace
      - run: echo "[all]" > workspace/inventory
      - run: 
          name: get instances ip
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> workspace/inventory
      - run: cat workspace/inventory
     
  set_stack_name_envvar:
    description:
      checks if the env var exists. if so it deletes it and recreates it else it creates it.
    parameters:
      stack_name:
        description: the name of the stack
        type: string
        default: UdacityProject3-${CIRCLE_JOB}-${CIRCLE_WORKFLOW_ID:0:5}
    steps: 
      - run:
          name: delete the STACK_NAME env var if it exists
          command: |
            echo "this the the value of the envvar before the script ${STACK_NAME}"

            delete="$(curl --request GET \
            --url https://circleci.com/api/v2/project/gh/DaphneyI/cd-example/envvar \
            -u ${CIRCLE_TOKEN} | grep -w STACK_NAME)"

            if $delete
            then
              curl --request GET \
              --url https://circleci.com/api/v2/project/gh/DaphneyI/cd-example/envvar/STACK_NAME \
              -u ${CIRCLE_TOKEN}

              curl --request DELETE \
              --url https://circleci.com/api/v2/project/gh/DaphneyI/cd-example/envvar/STACK_NAME \
              -u ${CIRCLE_TOKEN}
            fi
      - run:
          name: recreate the STACK_NAME env
          command: |
            curl --request POST \
            --url https://circleci.com/api/v2/project/gh/DaphneyI/cd-example/envvar \
            --header 'content-type: application/json' \
            -u ${CIRCLE_TOKEN} \
            --data '{"name": "STACK_NAME","value":"'"<< parameters.stack_name >>"'"}'
            echo "parameter.stack_name is << parameters.stack_name >>"
            echo "workflow is = ${CIRCLE_WORKFLOW_ID}"
            echo "workflow id 0:5 = ${CIRCLE_WORKFLOW_ID:0:5}"

            curl --request GET \
              --url https://circleci.com/api/v2/project/gh/DaphneyI/cd-example/envvar/STACK_NAME \
              -u ${CIRCLE_TOKEN}
              
  run-cloudformation-script:
    parameters:
      template_file:
        description: the path to the cloudformation script
        type: string
      parameter_file:
        description: the path to the parameter file
        type: string          
    steps:
      - run:
          name: Deploy Cloudformation Stack
          command: |
            PARAMS=$(cat << parameters.parameter_file >>)
            if [ -z $PARAMS ]
            then
              aws cloudformation deploy \
              --template-file << parameters.template_file >> \
              --stack-name ${STACK_NAME}
            else   
              aws cloudformation deploy \
              --template-file << parameters.template_file >> \
              --parameter-overrides $PARAMS \
              --stack-name ${STACK_NAME} 
            fi
     
  print-cloudformation-events:
    description: prints the cloudforation events for debuggig failed cloudformation commands
    steps:
      - run:  
          command: |
            aws cloudformation describe-stack-events \
            --stack-name ${STACK_NAME}
          name: cloudformation stack debug 
          when: on_fail
      
  destroy_environment:
    description: deletes the cloudformation stack created for the deployment during rollback
    steps:
      - run: 
          command: |
            aws cloudformation delete-stack --stack-name ${STACK_NAME}

  set_action_rollback:
    description: changes the run_rollback_workflow parameter to true
    steps:
      - run: 
          command: |
           curl -u ${CIRCLE_TOKEN}: \
           -X POST --header "Content-Type: application/json" \
           -d '{ "parameters": {"action": "rollback"} }' \
            https://circleci.com/api/v2/project/gh/DaphneyI/cd-example/pipeline

          when: on_fail     
            
jobs:
  # create-environment:
  #   description: provision the aws infra necessary to deploy code and create the inventory file
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - run:
  #         name: install dependencies
  #         command: yum install tar gzip curl -y
  #     - checkout
  #     - assume-role-with-web-identity:
  #         role-arn: arn:aws:iam::726559158740:role/Udacitycicd
  #         region: us-west-2
  #     - set_stack_name_envvar
  #     - run-cloudformation-script:
  #         template_file: cloudformation/project.yaml
  #         parameter_file: cloudformation/parameters.txt
  #     - print-cloudformation-events
  #     - get-ec2-pub-ip
  #     - persist_to_workspace:
  #         root: workspace
  #         paths:
  #           - inventory
  #     - set_action_rollback
       
  # deploy-application:
  #   description: install the application and its dependencies on the provisioned environment
  #   docker:
  #     - image: python:3.10.5-alpine3.16
  #   steps:
  #     - checkout
  #     - run:
  #         name: install dependencies
  #         command: |
  #           apk add --update ansible 
  #           apk add tar gzip curl
  #     - attach_workspace:
  #         at: /tmp/workspace
  #     - run: ls /tmp && ls /tmp/workspace
  #     - run: cat /tmp/workspace/inventory && cat /tmp/workspace/stack_name.txt
  #     - add_ssh_keys:
  #         fingerprints: 
  #           - "12:38:1a:fe:e3:c6:d4:75:54:1c:f5:a0:51:7e:85:7d"
  #     - run:
  #         name: run playbook
  #         command: |
  #           cd ansible
  #           ansible-playbook main.yml -i /tmp/workspace/inventory
  #     - set_action_rollback
         
  # smoke-test:
  #   description: check if the url is reachable via curl
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - checkout
  #     - run:
  #         name: install dependencies
  #         command: apk add curl coreutils 
  #     - run:
  #         name: check if website is up
  #         command: |
  #           URL=http://$(tail -n1 /tmp/workspace/inventory):3000
  #           if curl -s --head ${URL}
  #           then
  #             return 1
  #           else
  #             return 1
  #           fi
  #     - set_action_rollback

  # rollback:
  #   description: destroy all resources created for the deployment
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - assume-role-with-web-identity:
  #         role-arn: arn:aws:iam::726559158740:role/Udacitycicd
  #         region: us-west-2 
  #     - run: echo $STACK_NAME
  #     - run: aws cloudformation delete-stack --stack-name $STACK_NAME
  

  test:
    docker:
      - image: amazon/aws-cli
    steps:
      - set_stack_name_envvar

      # - assume-role-with-web-identity:
      #     role-arn: arn:aws:iam::726559158740:role/Udacitycicd
      #     region: us-west-2 
      # - run: aws cloudformation delete-stack --stack-name new

workflows:
  test:
    jobs:
      - test
          # context: 
          #   - aws-federation
  # deploy:
  #   when:
  #     equal: [deploy, << pipeline.parameters.action >>]
  #   jobs:
  #     - create-environment:
  #         context: 
  #           - aws-federation
  #     - deploy-application:
  #         requires:
  #           - create-environment
  #     - smoke-test:
  #         requires:
  #           - deploy-application
  # rollback_workflow:
  #   when:
  #     equal: [rollback, << pipeline.parameters.action >>]
  #   jobs:
  #     - rollback:
  #         context:
  #           - aws-federation
  
