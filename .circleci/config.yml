version: 2.1
commands:
  assume-role-with-web-identity:
    parameters:
      role-arn:
        description: |
          The Amazon Resource Name (ARN) of the role that the caller is assuming.
          Role ARN must be configured for web identity.
        type: string
      role-session-name:
        description: identifier for the assumed role session
        type: string
        default: "CircleCI-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}"
      session-duration:
        description: the time span of the session, measured in seconds
        type: string
        default: "3600"
      web-identity-token:
        description: circleci OIDC token to authenticate job to aws
        type: string
        default: $CIRCLE_OIDC_TOKEN
      region:
        description: region in which to perform tasks
        type: string
    steps:
      - run:
          command: |
            # use the OpenID Connect token to obtain AWS credentials
            read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \<<< \
            $(aws sts assume-role-with-web-identity \
              --role-arn << parameters.role-arn >> \
              --role-session-name << parameters.role-session-name >> \
              --web-identity-token << parameters.web-identity-token >> \
              --region << parameters.region >> \
              --endpoint-url "https://sts.<< parameters.region >>.amazonaws.com" \
              --duration-seconds << parameters.session-duration >> \
              --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
              --output text)    

            # configure aws to use the credentials gotten from calling the assume-web-identity command
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} 
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}

            # check if the role was assumed
            aws sts get-caller-identity

            # save credentials in ~/.aws/credentials and ~/.aws/config
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set aws_session_token $AWS_SESSION_TOKEN
            aws configure set default.region << parameters.region >>
         
  get-ec2-pub-ip:
    description: get the list of public ips of ec2 instances and write them to the inventory file
    steps:
      - run: echo "[all]" > inventory
      - run: 
          name: get instances ip
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=Udacity" \
            --output text >> inventory
      - run: cat inventory

  run-cloudformation-script:
    parameters:
      template_file:
        description: the path to the cloudformation script
        type: string
      stack_name:
        description: the name of the stack
        type: string
        default: UdacityProject3-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}
      parameter_file:
        description: the path to the json parameter file
        type: string   
    steps: 
      - run:
          name: Deploy Cloudformation Stack
          command: |
            if [ ! -s << parameters.parameter_file >> ]
            then
              aws cloudformation deploy \
              --template-file << parameters.template_file >> \
              --stack-name << parameters.stack_name >> 
            else
              PARAMS=$(cat << parameters.parameter_file >>)
              aws cloudformation deploy \
              --template-file << parameters.template_file >> \
              --parameter-overrides $PARAMS \
              --stack-name << parameters.stack_name >> 
            fi

  print-cloudformation-events:
    parameters:
      stack_name:
        description: the name of the stack
        type: string
        default: UdacityProject3-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}
      when:  
        description: |
          since the whe arg cannot be directly used on commands,
          you specify it here as a parameter
    steps:
      - run:  
          command: |
            aws cloudformation describe-stack-events \
            --stack-name << parameters.stack_name >>
          when: << parameters.when >>
            

jobs:
  provision-infra:
    description: provision the aws infra necessary to deploy code
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - assume-role-with-web-identity:
          role-arn: arn:aws:iam::726559158740:role/Udacitycicd
          region: us-west-2
      - run-cloudformation-script:
          template_file: cloudformation/project.yaml
          parameter_file: cloudformation/parameters.json
      - cloudformation-events:
          when: on_fail

workflows:
  my-workflow:
    jobs:
      - provision-infra:
          context: 
            - aws-federation
      