version: 2.1
parameters:
  stack_name:
    description: the name of the stack
    type: string
    default: UdacityProject3-${CIRCLE_JOB}-${CIRCLE_WORKFLOW_ID:0:5}

  run_rollback_workflow:
    description: determines whether to roll back deployment
    type: boolean
    default: false

commands:
  install-aws-cli:
    steps:
      - run:
        command: |
          apk update && apk add --no-cache curl gcompat zip
          curl -s https://awscli.amazonaws.com/awscli-exe-linux-x86_64-${AWS_CLI_VER}.zip \
            -o awscliv2.zip 
          unzip awscliv2.zip
          ./aws/install

  assume-role-with-web-identity:
    parameters:
      role-arn:
        description: |
          The Amazon Resource Name (ARN) of the role that the caller is assuming.
          Role ARN must be configured for web identity.
        type: string
      role-session-name:
        description: identifier for the assumed role session
        type: string
        default: "CircleCI-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}"
      session-duration:
        description: the time span of the session, measured in seconds
        type: string
        default: "3600"
      web-identity-token:
        description: circleci OIDC token to authenticate job to aws
        type: string
        default: $CIRCLE_OIDC_TOKEN
      region:
        description: region in which to perform tasks
        type: string
    steps:
      - run:
          command: |
            # use the OpenID Connect token to obtain AWS credentials
            read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \<<< \
            $(aws sts assume-role-with-web-identity \
              --role-arn << parameters.role-arn >> \
              --role-session-name << parameters.role-session-name >> \
              --web-identity-token << parameters.web-identity-token >> \
              --region << parameters.region >> \
              --endpoint-url "https://sts.<< parameters.region >>.amazonaws.com" \
              --duration-seconds << parameters.session-duration >> \
              --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
              --output text)    

            # configure aws to use the credentials gotten from calling the assume-web-identity command
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} 
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}

            # check if the role was assumed
            aws sts get-caller-identity

            # save credentials in ~/.aws/credentials and ~/.aws/config
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set aws_session_token $AWS_SESSION_TOKEN
            aws configure set default.region << parameters.region >>
         
  get-ec2-pub-ip:
    description: get the list of public ips of ec2 instances and write them to the inventory file
    steps:
      - run: cd ansible
      - run: echo "[all]" > ansible/inventory
      - run: 
          name: get instances ip
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> ansible/inventory
      - run: cat ansible/inventory
     
  run-cloudformation-script:
    parameters:
      template_file:
        description: the path to the cloudformation script
        type: string
      parameter_file:
        description: the path to the parameter file
        type: string   
    steps: 
      - run:
          name: Deploy Cloudformation Stack
          command: |
            PARAMS=$(cat << parameters.parameter_file >>)
            if [ -z $PARAMS ]
            then
              aws cloudformation deploy \
              --template-file << parameters.template_file >> \
              --stack-name << pipeline.parameters.stack_name >> 
            else   
              aws cloudformation deploy \
              --template-file << parameters.template_file >> \
              --parameter-overrides $PARAMS \
              --stack-name << pipeline.parameters.stack_name >> 
            fi

  print-cloudformation-events:
    description: prints the cloudforation events for debuggig failed cloudformation commands
    parameters:
      run_when:  
        description: |
          since the whe arg cannot be directly used on commands,
          you specify it here as a parameter. this determines when the command will be run
        type: string
    steps:
      - run:  
          command: |
            aws cloudformation describe-stack-events \
            --stack-name << pipeline.parameters.stack_name >>
          name: cloudformation stack debug 
          when: << parameters.run_when >>
      
  
  destroy_environment:
    description: deletes the cloudformation stack created for the deployment during rollback
    parameters:
      run_when:  
        description: |
          since the when arg cannot be directly used on commands,
          you specify it here as a parameter. this determines when the command will be run
        type: string
    steps:
      - run: 
          command: |
            aws cloudformation delete-stack \
            --stack-name << pipeline.parameters.stack_name >>
          when: << parameters.run_when >>

            
jobs:
  # create-environment:
  #   description: provision the aws infra necessary to deploy code and create the inventory file
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - run:
  #         name: install tar
  #         command: yum install tar gzip -y
  #     - checkout
  #     - assume-role-with-web-identity:
  #         role-arn: arn:aws:iam::726559158740:role/Udacitycicd
  #         region: us-west-2
  #     - run-cloudformation-script:
  #         template_file: cloudformation/project.yaml
  #         parameter_file: cloudformation/parameters.txt
  #     - print-cloudformation-events:
  #         run_when: on_fail
  #     - get-ec2-pub-ip
  #     - persist_to_workspace:
  #         root: ansible
  #         paths:
  #           - inventory
        # - destroy_environment:
        #     run_when: on_fail

  # deploy-application:
  #   description: install the application and its dependencies on the provisioned environment
  #   docker:
  #     - image: python:3.10.5-alpine3.16
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ansible/
  #     - run: ls ansible
  #     - run: cat ansible/inventory
  #     - add_ssh_keys:
  #         fingerprints: 
  #           - "12:38:1a:fe:e3:c6:d4:75:54:1c:f5:a0:51:7e:85:7d"
  #     - run:
  #         name: install dependencies
  #         command: |
  #           apk add --update ansible 
  #           apk add tar gzip 
  #     - run:
  #         name: run playbook
  #         command: |
  #           cd ansible
  #           ansible-playbook main.yml -i inventory
         
  
  test:
    docker:
      - image: python:3.10.5-alpine3.16
    steps:
      - install-aws-cli
      - run: aws --version

  # smoke-test:
  #   description: check if the url is reachable via curl
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ansible/
  #     - run:
  #         name: install dependencies
  #         command: apk add curl coreutils
  #     - run:
  #         name: check if website is up
  #         command: |
  #           URL=http://$(tail -n1 ansible/inventory):3000
  #           if curl -s --head ${URL}
  #           then
  #             return 1
  #           else
  #             return 1
  #           fi
  #     - destroy_environment:
  #         run_when: on_fail

workflows:
  my-workflow:
    jobs:
      # - create-environment:
      #     context: 
      #       - aws-federation
      # - deploy-application:
      #     requires:
      #       - create-environment
      # - smoke-test:
      #     requires:
      #       - deploy-application
      - test
      